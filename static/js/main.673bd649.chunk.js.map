{"version":3,"sources":["Border.js","App.js","index.js"],"names":["xArr","oArr","game","divColor","color","winColor","pointerEvents","ch","body","status","id","Border","winCases","useState","choice","player","setPlayer","sameMembers","arr1","arr2","every","arr2Item","includes","containsAll","checkWinner","index","length","console","log","changeColor","handleChoice","c","count","setCount","className","onClick","window","location","reload","map","push","style","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.673bd649.chunk.js","sourcesContent":["import { getByDisplayValue } from '@testing-library/react';\r\nimport React from 'react';\r\nimport { useState } from \"react\";\r\n\r\nvar xArr=[];\r\nvar oArr=[];\r\nvar game = false;\r\nconst divColor = {color: 'darkbrown' };\r\nconst winColor = {\r\n    color: 'brown',\r\n    pointerEvents: 'none',\r\n    };\r\n\r\nvar ch = [\r\n    {body: '',status: false,color: divColor,id: 0},\r\n    {body: '',status: false,color: divColor,id: 1},\r\n    {body: '',status: false,color: divColor,id: 2},\r\n    {body: '',status: false,color: divColor,id: 3},\r\n    {body: '',status: false,color: divColor,id: 4},\r\n    {body: '',status: false,color: divColor,id: 5},\r\n    {body: '',status: false,color: divColor,id: 6},\r\n    {body: '',status: false,color: divColor,id: 7},\r\n    {body: '',status: false,color: divColor,id: 8},\r\n];\r\nconst players = \"x is next\";\r\nconst Border = () => {\r\n   \r\n    \r\n    \r\n    \r\n    const winCases = [[0,1,2],\r\n                      [3,4,5],\r\n                      [7,8,6],\r\n                      [2,5,8], \r\n                      [1,4,7],\r\n                      [0,3,6],\r\n                      [0,4,8],\r\n                      [2,4,6]];\r\n   \r\n   \r\n\r\n\r\n    const [choice, setChoice] = useState(ch);\r\n    const [player, setPlayer] = useState(players);\r\n        const containsAll = (arr1, arr2) => \r\n        arr2.every(arr2Item => arr1.includes(arr2Item))\r\n        \r\n        const sameMembers = (arr1, arr2) => \r\n                containsAll(arr1, arr2);\r\n\r\n\r\n\r\n    const checkWinner = (arr1) => {\r\n        \r\n        for (let index = 0; index < winCases.length; index++) {\r\n            \r\n            if (sameMembers(arr1,winCases[index])) {\r\n                console.log(winCases[index]);\r\n                console.log(index +'winner');\r\n                \r\n                changeColor(index);\r\n                game = true;\r\n                \r\n                console.log(ch);\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n    }\r\n       \r\n    const changeColor = (id) => {\r\n        for (let index = 0; index < 3; index++) {\r\n            console.log(winCases[id][index] + \" this\");\r\n            ch[winCases[id][index]].color=winColor;\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n   \r\n\r\n    const handleChoice = (id,c) => {\r\n        if (ch[id].status===false) {\r\n            ch[id].status=true;\r\n            ch[id].body=c;\r\n            \r\n        }\r\n        console.log(ch);\r\n    \r\n    };\r\n    \r\n    \r\n\r\n    const [count, setCount] = useState(1);\r\n    const handleStart = (id, status) => {  \r\n    if ( game  === false) {\r\n        \r\n    \r\n     if(status===false){\r\n         if(count%2===0){\r\n            handleChoice(id,\"o\");\r\n            setCount(count + 1);\r\n            oArr.push(id);\r\n            checkWinner(oArr);\r\n            if (game===false) {\r\n                setPlayer('x is next');\r\n            }else{\r\n                setPlayer('o is winner');\r\n            }\r\n            \r\n        }else{\r\n            handleChoice(id,\"x\");\r\n            setCount(count + 1);\r\n            xArr.push(id);\r\n            checkWinner(xArr);\r\n            if (game===false) {\r\n                setPlayer('o is next');\r\n            }else{\r\n                setPlayer('x is winner');\r\n            }\r\n        }                       \r\n               \r\n    }              \r\n   }\r\n       \r\n    }\r\n    \r\n    const refreshPage = ()=>{\r\n        window.location.reload();\r\n     }\r\n    \r\n\r\n    return (  \r\n        <div className=\"Border\">\r\n            <div className=\"buttons\">\r\n           <div className=\"player_start\"> { player }</div>\r\n              <div className=\"button_restart\" onClick={refreshPage}>Restart</div>\r\n            </div>\r\n            <h1>Tic <span>Tac</span> Toe</h1>\r\n            <div className=\"grid-container\">\r\n              {\r\n                  choice.map((choice) => (\r\n                      <div className=\"grid-item\" key={choice.id} onClick={() => handleStart(choice.id,choice.status)}>\r\n                          <div className=\"choice\" style={choice.color}>{choice.body}</div>\r\n                          </div>\r\n                  ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\n\r\n\r\n\r\nexport default Border;","import { useState } from \"react\";\nimport Border from \"./Border\";\n\n\n\n\nfunction App() {\n  \n  \n\n  return (  \n   <div className=\"scene\">\n      <Border></Border> \n      <div className=\"floor\"></div> \n      <div className=\"player1 player\"></div>\n      <div className=\"player2 player\"></div>\n   </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}